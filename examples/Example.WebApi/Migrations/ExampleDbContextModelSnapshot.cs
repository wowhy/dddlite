// <auto-generated />
using Example.Core.Domain;
using Example.Repositories.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Example.WebApi.Migrations
{
    [DbContext(typeof(ExampleDbContext))]
    partial class ExampleDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.0-preview2-25794");

            modelBuilder.Entity("Example.Core.Domain.Order", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Contact");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid?>("CreatedById");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<Guid?>("LastUpdatedById");

                    b.Property<string>("Mobile");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken();

                    b.Property<int>("Status");

                    b.Property<decimal>("TotalPrice");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Example.Core.Domain.OrderLine", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("Count");

                    b.Property<Guid>("OrderId");

                    b.Property<Guid>("ProductId");

                    b.Property<string>("ProductName");

                    b.Property<decimal>("TotalPrice");

                    b.Property<decimal>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("Example.Core.Domain.Product", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid?>("CreatedById");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<Guid?>("LastUpdatedById");

                    b.Property<string>("Name");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken();

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Example.Core.Domain.OrderDetail", b =>
                {
                    b.Property<Guid?>("OrderId");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Example.Core.Domain.ProductDetail", b =>
                {
                    b.Property<Guid?>("ProductId");

                    b.Property<string>("Memo");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Example.Core.Domain.StreetAddress", b =>
                {
                    b.Property<Guid?>("OrderDetailOrderId");

                    b.Property<string>("City");

                    b.Property<string>("Street");

                    b.HasKey("OrderDetailOrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Example.Core.Domain.StreetAddress", b =>
                {
                    b.Property<Guid?>("OrderDetailOrderId");

                    b.Property<string>("City");

                    b.Property<string>("Street");

                    b.HasKey("OrderDetailOrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Example.Core.Domain.OrderLine", b =>
                {
                    b.HasOne("Example.Core.Domain.Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Example.Core.Domain.OrderDetail", b =>
                {
                    b.HasOne("Example.Core.Domain.Order")
                        .WithOne("Detail")
                        .HasForeignKey("Example.Core.Domain.OrderDetail", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Example.Core.Domain.ProductDetail", b =>
                {
                    b.HasOne("Example.Core.Domain.Product")
                        .WithOne("Detail")
                        .HasForeignKey("Example.Core.Domain.ProductDetail", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Example.Core.Domain.StreetAddress", b =>
                {
                    b.HasOne("Example.Core.Domain.OrderDetail")
                        .WithOne("BillingAddress")
                        .HasForeignKey("Example.Core.Domain.StreetAddress", "OrderDetailOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Example.Core.Domain.StreetAddress", b =>
                {
                    b.HasOne("Example.Core.Domain.OrderDetail")
                        .WithOne("ShippingAddress")
                        .HasForeignKey("Example.Core.Domain.StreetAddress", "OrderDetailOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
