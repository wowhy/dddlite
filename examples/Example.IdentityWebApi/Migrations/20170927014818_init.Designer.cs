// <auto-generated />
using Example.Core.Domain;
using Example.Repositories.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Example.IdentityWebApi.Migrations
{
    [DbContext(typeof(ExampleDbContext))]
    [Migration("20170927014818_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("Example.Core.Domain.Order", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Contact");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid?>("CreatedById");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<Guid?>("LastUpdatedById");

                    b.Property<string>("Mobile");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken();

                    b.Property<int>("Status");

                    b.Property<decimal>("TotalPrice");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Example.Core.Domain.OrderLine", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("Count");

                    b.Property<Guid>("OrderId");

                    b.Property<Guid>("ProductId");

                    b.Property<string>("ProductName");

                    b.Property<decimal>("TotalPrice");

                    b.Property<decimal>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("Example.Core.Domain.Product", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid?>("CreatedById");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<Guid?>("LastUpdatedById");

                    b.Property<string>("Name");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken();

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Example.Core.Domain.Order", b =>
                {
                    b.OwnsOne("Example.Core.Domain.OrderDetail", "Detail", b1 =>
                        {
                            b1.Property<Guid>("OrderId");

                            b1.ToTable("Orders");

                            b1.HasOne("Example.Core.Domain.Order")
                                .WithOne("Detail")
                                .HasForeignKey("Example.Core.Domain.OrderDetail", "OrderId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("Example.Core.Domain.StreetAddress", "BillingAddress", b2 =>
                                {
                                    b2.Property<Guid>("OrderDetailOrderId");

                                    b2.Property<string>("City");

                                    b2.Property<string>("Street");

                                    b2.ToTable("Orders");

                                    b2.HasOne("Example.Core.Domain.OrderDetail")
                                        .WithOne("BillingAddress")
                                        .HasForeignKey("Example.Core.Domain.StreetAddress", "OrderDetailOrderId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });

                            b1.OwnsOne("Example.Core.Domain.StreetAddress", "ShippingAddress", b2 =>
                                {
                                    b2.Property<Guid>("OrderDetailOrderId");

                                    b2.Property<string>("City");

                                    b2.Property<string>("Street");

                                    b2.ToTable("Orders");

                                    b2.HasOne("Example.Core.Domain.OrderDetail")
                                        .WithOne("ShippingAddress")
                                        .HasForeignKey("Example.Core.Domain.StreetAddress", "OrderDetailOrderId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });

            modelBuilder.Entity("Example.Core.Domain.OrderLine", b =>
                {
                    b.HasOne("Example.Core.Domain.Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Example.Core.Domain.Product", b =>
                {
                    b.OwnsOne("Example.Core.Domain.ProductDetail", "Detail", b1 =>
                        {
                            b1.Property<Guid>("ProductId");

                            b1.Property<string>("Memo");

                            b1.ToTable("Products");

                            b1.HasOne("Example.Core.Domain.Product")
                                .WithOne("Detail")
                                .HasForeignKey("Example.Core.Domain.ProductDetail", "ProductId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
